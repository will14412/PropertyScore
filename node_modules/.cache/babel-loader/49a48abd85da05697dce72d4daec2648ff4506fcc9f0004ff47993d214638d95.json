{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\willc\\\\CODING PROJECTS\\\\ReactProjects\\\\property-scoring-2\\\\src\\\\pages\\\\PropertyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport AddressSelector from '../components/AddressSelector';\nimport StatCard from '../components/StatCard';\nimport StatusPanel from '../components/StatusPanel';\n\n/**\n * The PropertyPage is responsible for presenting detailed information\n * about a specific property. It guides the user through selecting the\n * correct address (via getAddress) and then orchestrates a series of\n * API calls to gather data about the property. Each API call updates\n * a status tracker which is rendered in a persistent status panel.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PropertyPage = () => {\n  _s();\n  const {\n    postcode\n  } = useParams();\n  const [addresses, setAddresses] = useState([]);\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [results, setResults] = useState({});\n  const [statuses, setStatuses] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  // Fetch address options when the page loads\n  useEffect(() => {\n    async function fetchAddresses() {\n      try {\n        // Fetch addresses for the postcode using getAddress.io\n        const response = await fetch(`https://api.getAddress.io/find/${encodeURIComponent(postcode)}?api-key=${process.env.REACT_APP_GETADDRESS_API_KEY}&expand=true`);\n        const data = await response.json();\n        if (data && data.addresses) {\n          // Map the API response into user friendly strings\n          const formatted = data.addresses.map(item => {\n            // The API returns an object with lines, town, county and postcode\n            const lines = [];\n            if (item.address_line_1) lines.push(item.address_line_1);\n            if (item.address_line_2) lines.push(item.address_line_2);\n            if (item.town_or_city) lines.push(item.town_or_city);\n            if (item.county) lines.push(item.county);\n            if (item.postcode) lines.push(item.postcode);\n            return lines.join(', ');\n          });\n          setAddresses(formatted);\n        }\n      } catch (error) {\n        console.error('Error fetching addresses:', error);\n      }\n    }\n    if (postcode) {\n      fetchAddresses();\n    }\n  }, [postcode]);\n\n  /**\n   * Utility function to set the status of a single API task\n   */\n  const setStatus = (name, status) => {\n    setStatuses(prev => ({\n      ...prev,\n      [name]: status\n    }));\n  };\n\n  /**\n   * Trigger the sequence of API calls to gather property data.\n   */\n  const handleFetchData = async () => {\n    if (!selectedAddress) return;\n    setLoading(true);\n    // Initialize all statuses to pending. These keys match the logical steps\n    // in the property analysis pipeline. Feel free to add or remove keys\n    // depending on which datasets you integrate.\n    const initialStatuses = {\n      UPRN: 'pending',\n      Boundaries: 'pending',\n      Transactions: 'pending',\n      EPC: 'pending',\n      Planning: 'pending',\n      Flood: 'pending',\n      Environment: 'pending',\n      Noise: 'pending',\n      Radon: 'pending',\n      Crime: 'pending',\n      Schools: 'pending',\n      Health: 'pending',\n      Transport: 'pending',\n      Amenities: 'pending',\n      Demographics: 'pending',\n      CouncilTax: 'pending'\n    };\n    setStatuses(initialStatuses);\n    const collected = {};\n\n    /**\n     * Fetch the UPRN for the selected address using the Ordnance Survey Places API.\n     * This call is fundamental because many other datasets can then be joined\n     * using the UPRN as a key. If the API call fails, subsequent calls may\n     * still execute based on the postcode.\n     */\n    async function fetchUPRN() {\n      setStatus('UPRN', 'loading');\n      try {\n        const url = `https://api.os.uk/search/places/v1/find?query=${encodeURIComponent(selectedAddress)}&key=${process.env.REACT_APP_OS_PLACES_API_KEY}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        collected.UPRN = data;\n        setStatus('UPRN', 'success');\n        return data;\n      } catch (error) {\n        console.error('UPRN error', error);\n        setStatus('UPRN', 'error');\n        throw error;\n      }\n    }\n    async function fetchBoundaries() {\n      setStatus('Boundaries', 'loading');\n      try {\n        const response = await fetch(`https://mapit.mysociety.org/postcode/${encodeURIComponent(postcode)}`);\n        const data = await response.json();\n        collected.Boundaries = data;\n        setStatus('Boundaries', 'success');\n      } catch (error) {\n        console.error('Boundaries error', error);\n        setStatus('Boundaries', 'error');\n      }\n    }\n    async function fetchTransactions() {\n      setStatus('Transactions', 'loading');\n      try {\n        // Land Registry Price Paid Data via data.gov.uk. This endpoint returns\n        // recent transactions for the given postcode. See\n        // https://landregistry.data.gov.uk/app/ppd for documentation.\n        const response = await fetch(`https://landregistry.data.gov.uk/data/ppd/v1/postcode/${encodeURIComponent(postcode)}.json`);\n        const data = await response.json();\n        collected.Transactions = data;\n        setStatus('Transactions', 'success');\n      } catch (error) {\n        console.error('Transactions error', error);\n        setStatus('Transactions', 'error');\n      }\n    }\n    async function fetchEPC() {\n      setStatus('EPC', 'loading');\n      try {\n        const response = await fetch(`https://epc.opendatacommunities.org/api/v1/domestic/dec-summary?postcode=${encodeURIComponent(postcode)}`, {\n          headers: {\n            Accept: 'application/json',\n            // The API uses Basic auth with a key. If you have an API key and secret,\n            // set them in your environment and encode here accordingly. For\n            // demonstration we'll just send the API key via header.\n            Authorization: `Basic ${btoa(`${process.env.REACT_APP_EPC_API_KEY}:`)}`\n          }\n        });\n        const data = await response.json();\n        collected.EPC = data;\n        setStatus('EPC', 'success');\n      } catch (error) {\n        console.error('EPC error', error);\n        setStatus('EPC', 'error');\n      }\n    }\n    async function fetchPlanning() {\n      setStatus('Planning', 'loading');\n      try {\n        // Query planning.data.gov.uk for planning applications near the postcode\n        const response = await fetch(`https://planning.data.gov.uk/entities.json?postcode=${encodeURIComponent(postcode)}`);\n        const data = await response.json();\n        collected.Planning = data;\n        setStatus('Planning', 'success');\n      } catch (error) {\n        console.error('Planning error', error);\n        setStatus('Planning', 'error');\n      }\n    }\n    async function fetchFlood() {\n      setStatus('Flood', 'loading');\n      try {\n        const response = await fetch(`https://environment.data.gov.uk/flood-monitoring/id/postcodes/${encodeURIComponent(postcode)}.json`);\n        const data = await response.json();\n        collected.Flood = data;\n        setStatus('Flood', 'success');\n      } catch (error) {\n        console.error('Flood error', error);\n        setStatus('Flood', 'error');\n      }\n    }\n    async function fetchEnvironment() {\n      setStatus('Environment', 'loading');\n      try {\n        // The UKâ€‘AIR API returns air quality information for a given postcode. You\n        // must sign up for an API key. Replace the endpoint with the correct\n        // service if it changes.\n        const response = await fetch(`https://api.erg.ic.ac.uk/AirQuality/Postcode?postcode=${encodeURIComponent(postcode)}&key=${process.env.REACT_APP_AIR_QUALITY_API_KEY}`);\n        const data = await response.json();\n        collected.Environment = data;\n        setStatus('Environment', 'success');\n      } catch (error) {\n        console.error('Environment error', error);\n        setStatus('Environment', 'error');\n      }\n    }\n    async function fetchNoise() {\n      setStatus('Noise', 'loading');\n      try {\n        // There is no simple REST API for noise mapping; you may need to call\n        // DEFRA's strategic noise dataset via WMS/WFS. Here we stub an\n        // empty response to satisfy the interface.\n        collected.Noise = {};\n        setStatus('Noise', 'success');\n      } catch (error) {\n        console.error('Noise error', error);\n        setStatus('Noise', 'error');\n      }\n    }\n    async function fetchRadon() {\n      setStatus('Radon', 'loading');\n      try {\n        // The radon potential dataset does not have a public API. You can\n        // integrate BGS GeoSure WMS if you license it. Here we stub.\n        collected.Radon = {};\n        setStatus('Radon', 'success');\n      } catch (error) {\n        setStatus('Radon', 'error');\n      }\n    }\n    async function fetchCrime() {\n      setStatus('Crime', 'loading');\n      try {\n        const response = await fetch(`https://data.police.uk/api/crimes-street/all-crime?postcode=${encodeURIComponent(postcode)}`);\n        const data = await response.json();\n        collected.Crime = data;\n        setStatus('Crime', 'success');\n      } catch (error) {\n        console.error('Crime error', error);\n        setStatus('Crime', 'error');\n      }\n    }\n    async function fetchSchools() {\n      setStatus('Schools', 'loading');\n      try {\n        // The DfE does not provide a straightforward API; you may need to\n        // integrate CSV downloads or a third party API. Here we stub.\n        collected.Schools = {};\n        setStatus('Schools', 'success');\n      } catch (error) {\n        setStatus('Schools', 'error');\n      }\n    }\n    async function fetchHealth() {\n      setStatus('Health', 'loading');\n      try {\n        const response = await fetch(`https://directory.spineservices.nhs.uk/ORD/2-0-0/organizationalunits?postcode=${encodeURIComponent(postcode)}&api_key=${process.env.REACT_APP_NHS_API_KEY}`);\n        const data = await response.json();\n        collected.Health = data;\n        setStatus('Health', 'success');\n      } catch (error) {\n        console.error('Health error', error);\n        setStatus('Health', 'error');\n      }\n    }\n    async function fetchTransport() {\n      setStatus('Transport', 'loading');\n      try {\n        // TravelTime API typically expects coordinates and a post body; for\n        // demonstration we call a fictional endpoint. Replace with real\n        // request when integrating.\n        const response = await fetch(`https://api.traveltimeapp.com/v4/time-map?postcode=${encodeURIComponent(postcode)}`, {\n          headers: {\n            'X-Api-Key': process.env.REACT_APP_TRAVELTIME_API_KEY\n          }\n        });\n        const data = await response.json();\n        collected.Transport = data;\n        setStatus('Transport', 'success');\n      } catch (error) {\n        console.error('Transport error', error);\n        setStatus('Transport', 'error');\n      }\n    }\n    async function fetchAmenities() {\n      setStatus('Amenities', 'loading');\n      try {\n        // To use Overpass API properly you need lat/lon. Here we simply stub\n        // the call because the lat/lon is not yet extracted. A real\n        // implementation would first parse the UPRN data or OS Places\n        // response to get coordinates and then build an Overpass query.\n        collected.Amenities = {};\n        setStatus('Amenities', 'success');\n      } catch (error) {\n        console.error('Amenities error', error);\n        setStatus('Amenities', 'error');\n      }\n    }\n    async function fetchDemographics() {\n      setStatus('Demographics', 'loading');\n      try {\n        // The ONS API requires codes like LSOA to retrieve census data. Once\n        // you have boundaries from MapIt you can extract the LSOA code and\n        // query the ONS dataset. This is stubbed for now.\n        collected.Demographics = {};\n        setStatus('Demographics', 'success');\n      } catch (error) {\n        setStatus('Demographics', 'error');\n      }\n    }\n    async function fetchCouncilTax() {\n      setStatus('CouncilTax', 'loading');\n      try {\n        // There is no free API for Council Tax band lookups. Many services\n        // require scraping or commercial licensing. We stub the result.\n        collected.CouncilTax = {};\n        setStatus('CouncilTax', 'success');\n      } catch (error) {\n        setStatus('CouncilTax', 'error');\n      }\n    }\n    try {\n      await fetchUPRN();\n      await Promise.all([fetchBoundaries(), fetchTransactions(), fetchEPC(), fetchPlanning(), fetchFlood(), fetchEnvironment(), fetchNoise(), fetchRadon(), fetchCrime(), fetchSchools(), fetchHealth(), fetchTransport(), fetchAmenities(), fetchDemographics(), fetchCouncilTax()]);\n    } catch (error) {\n      // Errors are handled individually within each call; this catch ensures\n      // we transition out of the loading state even if one call throws.\n      console.error('Pipeline error', error);\n    } finally {\n      setLoading(false);\n      setResults(collected);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-blue-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-blue-700 mb-2\",\n        children: \"Property details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-4\",\n        children: [\"Postcode: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: postcode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), addresses.length > 0 && !selectedAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(AddressSelector, {\n          addresses: addresses,\n          selected: selectedAddress,\n          onSelect: setSelectedAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFetchData,\n          className: \"mt-4 px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-dark disabled:opacity-50\",\n          disabled: !selectedAddress,\n          children: \"Fetch property data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this), selectedAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col lg:flex-row gap-6 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow\",\n          children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600 mb-4\",\n            children: \"Fetching data\\u2026\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, this), !loading && Object.keys(results).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4\",\n            children: Object.keys(results).map(key => /*#__PURE__*/_jsxDEV(StatCard, {\n              title: key,\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"text-xs whitespace-pre-wrap break-all\",\n                children: JSON.stringify(results[key], null, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 23\n              }, this)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), Object.keys(statuses).length > 0 && /*#__PURE__*/_jsxDEV(StatusPanel, {\n          statuses: statuses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n};\n_s(PropertyPage, \"SLzvQ4BTIR06IU2hACNSPvgiZL4=\", false, function () {\n  return [useParams];\n});\n_c = PropertyPage;\nexport default PropertyPage;\nvar _c;\n$RefreshReg$(_c, \"PropertyPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","AddressSelector","StatCard","StatusPanel","jsxDEV","_jsxDEV","PropertyPage","_s","postcode","addresses","setAddresses","selectedAddress","setSelectedAddress","results","setResults","statuses","setStatuses","loading","setLoading","fetchAddresses","response","fetch","encodeURIComponent","process","env","REACT_APP_GETADDRESS_API_KEY","data","json","formatted","map","item","lines","address_line_1","push","address_line_2","town_or_city","county","join","error","console","setStatus","name","status","prev","handleFetchData","initialStatuses","UPRN","Boundaries","Transactions","EPC","Planning","Flood","Environment","Noise","Radon","Crime","Schools","Health","Transport","Amenities","Demographics","CouncilTax","collected","fetchUPRN","url","REACT_APP_OS_PLACES_API_KEY","fetchBoundaries","fetchTransactions","fetchEPC","headers","Accept","Authorization","btoa","REACT_APP_EPC_API_KEY","fetchPlanning","fetchFlood","fetchEnvironment","REACT_APP_AIR_QUALITY_API_KEY","fetchNoise","fetchRadon","fetchCrime","fetchSchools","fetchHealth","REACT_APP_NHS_API_KEY","fetchTransport","REACT_APP_TRAVELTIME_API_KEY","fetchAmenities","fetchDemographics","fetchCouncilTax","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","selected","onSelect","onClick","disabled","Object","keys","key","title","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/willc/CODING PROJECTS/ReactProjects/property-scoring-2/src/pages/PropertyPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport AddressSelector from '../components/AddressSelector';\nimport StatCard from '../components/StatCard';\nimport StatusPanel from '../components/StatusPanel';\n\n/**\n * The PropertyPage is responsible for presenting detailed information\n * about a specific property. It guides the user through selecting the\n * correct address (via getAddress) and then orchestrates a series of\n * API calls to gather data about the property. Each API call updates\n * a status tracker which is rendered in a persistent status panel.\n */\nconst PropertyPage = () => {\n  const { postcode } = useParams();\n  const [addresses, setAddresses] = useState([]);\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [results, setResults] = useState({});\n  const [statuses, setStatuses] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  // Fetch address options when the page loads\n  useEffect(() => {\n    async function fetchAddresses() {\n      try {\n        // Fetch addresses for the postcode using getAddress.io\n        const response = await fetch(\n          `https://api.getAddress.io/find/${encodeURIComponent(postcode)}?api-key=${process.env.REACT_APP_GETADDRESS_API_KEY}&expand=true`\n        );\n        const data = await response.json();\n        if (data && data.addresses) {\n          // Map the API response into user friendly strings\n          const formatted = data.addresses.map((item) => {\n            // The API returns an object with lines, town, county and postcode\n            const lines = [];\n            if (item.address_line_1) lines.push(item.address_line_1);\n            if (item.address_line_2) lines.push(item.address_line_2);\n            if (item.town_or_city) lines.push(item.town_or_city);\n            if (item.county) lines.push(item.county);\n            if (item.postcode) lines.push(item.postcode);\n            return lines.join(', ');\n          });\n          setAddresses(formatted);\n        }\n      } catch (error) {\n        console.error('Error fetching addresses:', error);\n      }\n    }\n    if (postcode) {\n      fetchAddresses();\n    }\n  }, [postcode]);\n\n  /**\n   * Utility function to set the status of a single API task\n   */\n  const setStatus = (name, status) => {\n    setStatuses((prev) => ({ ...prev, [name]: status }));\n  };\n\n  /**\n   * Trigger the sequence of API calls to gather property data.\n   */\n  const handleFetchData = async () => {\n    if (!selectedAddress) return;\n    setLoading(true);\n    // Initialize all statuses to pending. These keys match the logical steps\n    // in the property analysis pipeline. Feel free to add or remove keys\n    // depending on which datasets you integrate.\n    const initialStatuses = {\n      UPRN: 'pending',\n      Boundaries: 'pending',\n      Transactions: 'pending',\n      EPC: 'pending',\n      Planning: 'pending',\n      Flood: 'pending',\n      Environment: 'pending',\n      Noise: 'pending',\n      Radon: 'pending',\n      Crime: 'pending',\n      Schools: 'pending',\n      Health: 'pending',\n      Transport: 'pending',\n      Amenities: 'pending',\n      Demographics: 'pending',\n      CouncilTax: 'pending',\n    };\n    setStatuses(initialStatuses);\n    const collected = {};\n\n    /**\n     * Fetch the UPRN for the selected address using the Ordnance Survey Places API.\n     * This call is fundamental because many other datasets can then be joined\n     * using the UPRN as a key. If the API call fails, subsequent calls may\n     * still execute based on the postcode.\n     */\n    async function fetchUPRN() {\n      setStatus('UPRN', 'loading');\n      try {\n        const url = `https://api.os.uk/search/places/v1/find?query=${encodeURIComponent(selectedAddress)}&key=${process.env.REACT_APP_OS_PLACES_API_KEY}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        collected.UPRN = data;\n        setStatus('UPRN', 'success');\n        return data;\n      } catch (error) {\n        console.error('UPRN error', error);\n        setStatus('UPRN', 'error');\n        throw error;\n      }\n    }\n\n    async function fetchBoundaries() {\n      setStatus('Boundaries', 'loading');\n      try {\n        const response = await fetch(`https://mapit.mysociety.org/postcode/${encodeURIComponent(postcode)}`);\n        const data = await response.json();\n        collected.Boundaries = data;\n        setStatus('Boundaries', 'success');\n      } catch (error) {\n        console.error('Boundaries error', error);\n        setStatus('Boundaries', 'error');\n      }\n    }\n\n    async function fetchTransactions() {\n      setStatus('Transactions', 'loading');\n      try {\n        // Land Registry Price Paid Data via data.gov.uk. This endpoint returns\n        // recent transactions for the given postcode. See\n        // https://landregistry.data.gov.uk/app/ppd for documentation.\n        const response = await fetch(\n          `https://landregistry.data.gov.uk/data/ppd/v1/postcode/${encodeURIComponent(postcode)}.json`\n        );\n        const data = await response.json();\n        collected.Transactions = data;\n        setStatus('Transactions', 'success');\n      } catch (error) {\n        console.error('Transactions error', error);\n        setStatus('Transactions', 'error');\n      }\n    }\n\n    async function fetchEPC() {\n      setStatus('EPC', 'loading');\n      try {\n        const response = await fetch(\n          `https://epc.opendatacommunities.org/api/v1/domestic/dec-summary?postcode=${encodeURIComponent(\n            postcode\n          )}`,\n          {\n            headers: {\n              Accept: 'application/json',\n              // The API uses Basic auth with a key. If you have an API key and secret,\n              // set them in your environment and encode here accordingly. For\n              // demonstration we'll just send the API key via header.\n              Authorization: `Basic ${btoa(\n                `${process.env.REACT_APP_EPC_API_KEY}:`\n              )}`,\n            },\n          }\n        );\n        const data = await response.json();\n        collected.EPC = data;\n        setStatus('EPC', 'success');\n      } catch (error) {\n        console.error('EPC error', error);\n        setStatus('EPC', 'error');\n      }\n    }\n\n    async function fetchPlanning() {\n      setStatus('Planning', 'loading');\n      try {\n        // Query planning.data.gov.uk for planning applications near the postcode\n        const response = await fetch(\n          `https://planning.data.gov.uk/entities.json?postcode=${encodeURIComponent(\n            postcode\n          )}`\n        );\n        const data = await response.json();\n        collected.Planning = data;\n        setStatus('Planning', 'success');\n      } catch (error) {\n        console.error('Planning error', error);\n        setStatus('Planning', 'error');\n      }\n    }\n\n    async function fetchFlood() {\n      setStatus('Flood', 'loading');\n      try {\n        const response = await fetch(\n          `https://environment.data.gov.uk/flood-monitoring/id/postcodes/${encodeURIComponent(\n            postcode\n          )}.json`\n        );\n        const data = await response.json();\n        collected.Flood = data;\n        setStatus('Flood', 'success');\n      } catch (error) {\n        console.error('Flood error', error);\n        setStatus('Flood', 'error');\n      }\n    }\n\n    async function fetchEnvironment() {\n      setStatus('Environment', 'loading');\n      try {\n        // The UKâ€‘AIR API returns air quality information for a given postcode. You\n        // must sign up for an API key. Replace the endpoint with the correct\n        // service if it changes.\n        const response = await fetch(\n          `https://api.erg.ic.ac.uk/AirQuality/Postcode?postcode=${encodeURIComponent(\n            postcode\n          )}&key=${process.env.REACT_APP_AIR_QUALITY_API_KEY}`\n        );\n        const data = await response.json();\n        collected.Environment = data;\n        setStatus('Environment', 'success');\n      } catch (error) {\n        console.error('Environment error', error);\n        setStatus('Environment', 'error');\n      }\n    }\n\n    async function fetchNoise() {\n      setStatus('Noise', 'loading');\n      try {\n        // There is no simple REST API for noise mapping; you may need to call\n        // DEFRA's strategic noise dataset via WMS/WFS. Here we stub an\n        // empty response to satisfy the interface.\n        collected.Noise = {};\n        setStatus('Noise', 'success');\n      } catch (error) {\n        console.error('Noise error', error);\n        setStatus('Noise', 'error');\n      }\n    }\n\n    async function fetchRadon() {\n      setStatus('Radon', 'loading');\n      try {\n        // The radon potential dataset does not have a public API. You can\n        // integrate BGS GeoSure WMS if you license it. Here we stub.\n        collected.Radon = {};\n        setStatus('Radon', 'success');\n      } catch (error) {\n        setStatus('Radon', 'error');\n      }\n    }\n\n    async function fetchCrime() {\n      setStatus('Crime', 'loading');\n      try {\n        const response = await fetch(\n          `https://data.police.uk/api/crimes-street/all-crime?postcode=${encodeURIComponent(\n            postcode\n          )}`\n        );\n        const data = await response.json();\n        collected.Crime = data;\n        setStatus('Crime', 'success');\n      } catch (error) {\n        console.error('Crime error', error);\n        setStatus('Crime', 'error');\n      }\n    }\n\n    async function fetchSchools() {\n      setStatus('Schools', 'loading');\n      try {\n        // The DfE does not provide a straightforward API; you may need to\n        // integrate CSV downloads or a third party API. Here we stub.\n        collected.Schools = {};\n        setStatus('Schools', 'success');\n      } catch (error) {\n        setStatus('Schools', 'error');\n      }\n    }\n\n    async function fetchHealth() {\n      setStatus('Health', 'loading');\n      try {\n        const response = await fetch(\n          `https://directory.spineservices.nhs.uk/ORD/2-0-0/organizationalunits?postcode=${encodeURIComponent(\n            postcode\n          )}&api_key=${process.env.REACT_APP_NHS_API_KEY}`\n        );\n        const data = await response.json();\n        collected.Health = data;\n        setStatus('Health', 'success');\n      } catch (error) {\n        console.error('Health error', error);\n        setStatus('Health', 'error');\n      }\n    }\n\n    async function fetchTransport() {\n      setStatus('Transport', 'loading');\n      try {\n        // TravelTime API typically expects coordinates and a post body; for\n        // demonstration we call a fictional endpoint. Replace with real\n        // request when integrating.\n        const response = await fetch(\n          `https://api.traveltimeapp.com/v4/time-map?postcode=${encodeURIComponent(\n            postcode\n          )}`,\n          {\n            headers: {\n              'X-Api-Key': process.env.REACT_APP_TRAVELTIME_API_KEY,\n            },\n          }\n        );\n        const data = await response.json();\n        collected.Transport = data;\n        setStatus('Transport', 'success');\n      } catch (error) {\n        console.error('Transport error', error);\n        setStatus('Transport', 'error');\n      }\n    }\n\n    async function fetchAmenities() {\n      setStatus('Amenities', 'loading');\n      try {\n        // To use Overpass API properly you need lat/lon. Here we simply stub\n        // the call because the lat/lon is not yet extracted. A real\n        // implementation would first parse the UPRN data or OS Places\n        // response to get coordinates and then build an Overpass query.\n        collected.Amenities = {};\n        setStatus('Amenities', 'success');\n      } catch (error) {\n        console.error('Amenities error', error);\n        setStatus('Amenities', 'error');\n      }\n    }\n\n    async function fetchDemographics() {\n      setStatus('Demographics', 'loading');\n      try {\n        // The ONS API requires codes like LSOA to retrieve census data. Once\n        // you have boundaries from MapIt you can extract the LSOA code and\n        // query the ONS dataset. This is stubbed for now.\n        collected.Demographics = {};\n        setStatus('Demographics', 'success');\n      } catch (error) {\n        setStatus('Demographics', 'error');\n      }\n    }\n\n    async function fetchCouncilTax() {\n      setStatus('CouncilTax', 'loading');\n      try {\n        // There is no free API for Council Tax band lookups. Many services\n        // require scraping or commercial licensing. We stub the result.\n        collected.CouncilTax = {};\n        setStatus('CouncilTax', 'success');\n      } catch (error) {\n        setStatus('CouncilTax', 'error');\n      }\n    }\n\n    try {\n      await fetchUPRN();\n      await Promise.all([\n        fetchBoundaries(),\n        fetchTransactions(),\n        fetchEPC(),\n        fetchPlanning(),\n        fetchFlood(),\n        fetchEnvironment(),\n        fetchNoise(),\n        fetchRadon(),\n        fetchCrime(),\n        fetchSchools(),\n        fetchHealth(),\n        fetchTransport(),\n        fetchAmenities(),\n        fetchDemographics(),\n        fetchCouncilTax(),\n      ]);\n    } catch (error) {\n      // Errors are handled individually within each call; this catch ensures\n      // we transition out of the loading state even if one call throws.\n      console.error('Pipeline error', error);\n    } finally {\n      setLoading(false);\n      setResults(collected);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-blue-50\">\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <h1 className=\"text-3xl font-bold text-blue-700 mb-2\">Property details</h1>\n        <p className=\"text-gray-600 mb-4\">\n          Postcode: <strong>{postcode}</strong>\n        </p>\n        {/* Address selector. Display this until the user picks an address. */}\n        {addresses.length > 0 && !selectedAddress && (\n          <div className=\"mb-6\">\n            <AddressSelector\n              addresses={addresses}\n              selected={selectedAddress}\n              onSelect={setSelectedAddress}\n            />\n            <button\n              onClick={handleFetchData}\n              className=\"mt-4 px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-dark disabled:opacity-50\"\n              disabled={!selectedAddress}\n            >\n              Fetch property data\n            </button>\n          </div>\n        )}\n        {/* Main layout: results and status panel */}\n        {selectedAddress && (\n          <div className=\"flex flex-col lg:flex-row gap-6 mt-6\">\n            {/* Results area */}\n            <div className=\"flex-grow\">\n              {loading && (\n                <p className=\"text-gray-600 mb-4\">Fetching dataâ€¦</p>\n              )}\n              {!loading && Object.keys(results).length > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4\">\n                  {Object.keys(results).map((key) => (\n                    <StatCard key={key} title={key}>\n                      <pre className=\"text-xs whitespace-pre-wrap break-all\">\n                        {JSON.stringify(results[key], null, 2)}\n                      </pre>\n                    </StatCard>\n                  ))}\n                </div>\n              )}\n            </div>\n            {/* Status panel stays visible at all times once a fetch is started */}\n            {Object.keys(statuses).length > 0 && (\n              <StatusPanel statuses={statuses} />\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PropertyPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}